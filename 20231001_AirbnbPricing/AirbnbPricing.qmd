---
title: "Airbnb Price Regression Modeling"
author: "Barbara Flores"
format: pdf 
output: 
  pdf_document: 
  latex_engine: pdflatex
---

```{r, include = FALSE}
# Global settings to hide code and results in the final document
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results='hide')
```

```{r}
# Load required packages and read Airbnb data from GitHub

library(pacman)

p_load(tidymodels, tidyverse, readr, geosphere)

path <- "https://raw.githubusercontent.com/BarbaraPFloresRios/IDS702_ModelingAndRepresentationOfData/main/20231001_AirbnbPricing/listings.csv"

Airbnb <- read_csv(path)
```

```{r}
# Cleaning data and selecting relevant columns for predictive modeling

#First, We created the Airbnb_sub dataset for easier work. 
Airbnb_sub <- Airbnb 

#Then, we create new variables that allow us to use the current variables in our model.

# host_since
# To include the date since the host joined the platform, we will consider the number of days between their joining date and the date when the database was extracted, i.e., June 18, 2023.

Airbnb_sub$host_days_since_joining <- round(as.numeric(difftime("2023-06-18", Airbnb_sub$host_since, units = "days")))

# host_response_time
Airbnb_sub$host_response_time_category <- factor(Airbnb_sub$host_response_time, levels = c("N/A", "a few days or more", "within a day", "within a few hours", "within an hour"))

# host_response_rate
Airbnb_sub <- Airbnb_sub %>%
  mutate(host_response_rate_percentage = as.numeric(sub("%", "", host_response_rate)) / 100)

# host_acceptance_rate
Airbnb_sub <- Airbnb_sub %>%
  mutate(host_acceptance_rate_percentage = as.numeric(sub("%", "", host_acceptance_rate)) / 100)

#host_is_superhost 
#We fill in the NA values for 'host_is_superhost' with false

Airbnb_sub$host_is_superhost_filled <- ifelse(is.na(Airbnb_sub$host_is_superhost), FALSE, Airbnb_sub$host_is_superhost)

#neighbourhood
Airbnb_sub <- Airbnb_sub %>%
  mutate(neighbourhood_grouped = factor(
    case_when(
      grepl("Arden", neighbourhood) ~ "Arden",
      grepl("Asheville", neighbourhood) ~ "Asheville",
      grepl("Ashville", neighbourhood) ~ "Asheville",
      grepl("Avery Creek", neighbourhood) ~ "Avery Creek",
      grepl("Biltmore Forest", neighbourhood) ~ "Biltmore Forest",
      grepl("Buncombe County", neighbourhood) ~ "Buncombe County",
      grepl("Candler", neighbourhood) ~ "Candler",
      grepl("Fairview", neighbourhood) ~ "Fairview",
      grepl("Fletcher", neighbourhood) ~ "Fletcher",
      grepl("Leicester", neighbourhood) ~ "Leicester",
      grepl("Woodfin", neighbourhood) ~ "Woodfin",
      TRUE ~ "Others"
    ),
    levels = c("Arden", "Asheville", "Avery Creek", "Biltmore Forest", "Buncombe County", 
               "Candler", "Fairview", "Fletcher", "Leicester", "Woodfin", "Others")
  ))

# "longitude","latitude"
Airbnb_sub$dist_to_dt <- apply(Airbnb_sub[,c("longitude","latitude")],1,function(x) distm(
  c(-82.55481168521978,35.59701329976918),
  x,fun=distHaversine))*0.00062137

# property_type
Airbnb_sub <- Airbnb_sub %>%
  mutate(
    property_type_grouped = factor(
      case_when(
        grepl("Entire", property_type) ~ "Entire Place",
        grepl("Private room", property_type) ~ "Private Room",
        grepl("Shared room", property_type) ~ "Shared Room",
        grepl("Barn|Bus|Camper/RV|Campsite|Farm stay|Tent|Tiny home|Yurt", property_type) ~ "Non-Traditional",
        TRUE ~ "Other"
      ),
      levels = c("Entire Place", "Private Room", "Shared Room", "Non-Traditional", "Other")
    )
  )

# room_type
Airbnb_sub$room_type <- factor(Airbnb_sub$room_type)

# bathrooms_text
Airbnb_sub$bathrooms_text <- gsub("Half-bath|Shared half-bath", "0.5", Airbnb_sub$bathrooms_text)

Airbnb_sub$bathrooms_numeric <- as.numeric(gsub("[^0-9.]", "", Airbnb_sub$bathrooms_text))

```

```{r}
#amenities

#Binary variables are created for the most repeated amenities, grouping some categories to facilitate data management (since originally there are 2115 different amenities).

Airbnb_sub <- Airbnb_sub %>%
  mutate(
    security = ifelse(grepl("alarm|fire extinguisher|extinguisher|first aid kit", tolower(amenities)), TRUE, FALSE),
    essentials = ifelse(grepl("essentials|hot water", tolower(amenities)), TRUE, FALSE),
    kitchen_amenities = ifelse(grepl("dishes and silverware|microwave|kitchen|refrigerator|cooking  basics|coffee|freezer|wine glasses|oven|toaster|dining table", tolower(amenities)), TRUE, FALSE),
    entertainment = ifelse(grepl("tv|television|netflix|hdtv|fire t", tolower(amenities)), TRUE, FALSE),
    bedroom_amenities = ifelse(grepl("hangers|bed linens|iron|extra pillows and blankets", tolower(amenities)), TRUE, FALSE),
    work = ifelse(grepl("wifi|dedicated workspace", tolower(amenities)), TRUE, FALSE),
    parking = ifelse(grepl("parking", tolower(amenities)), TRUE, FALSE),
    toiletries = ifelse(grepl("hair dryer|shampoo|sleaning products|body soap|shower gel|conditioner", tolower(amenities)), TRUE, FALSE),
    climate_control = ifelse(grepl("heating|air conditioning", tolower(amenities)), TRUE, FALSE),
    convenience_features = ifelse(grepl("self check-in|private entrance", tolower(amenities)), TRUE, FALSE)
  )
```

```{r}
#we continue transforming the variables

#price
Airbnb_sub$price_numeric <- as.numeric(gsub("\\$", "", Airbnb_sub$price))
```

```{r}
# To enhance readability, we remove the variables from Airbnb_sub that will not be used as they do not contribute useful information for the model (such as the publication URL, image, host name, etc.), and we will also eliminate the variables that have already been transformed into the final ones we will be working with.

Airbnb_sub <- Airbnb_sub |> select(-c(
# unused variable
"id","listing_url","scrape_id","last_scraped","source","name","description","neighborhood_overview","picture_url","host_id","host_url","host_name","host_location","host_about","host_thumbnail_url","host_picture_url","host_neighbourhood","host_listings_count","host_verifications","neighbourhood_cleansed","neighbourhood_group_cleansed","bathrooms","calendar_updated","calendar_last_scraped","first_review","last_review","license",

#transforment variables                                      
"host_since","host_response_time","host_response_rate","host_acceptance_rate", "host_is_superhost","neighbourhood", "latitude", "longitude","property_type", "bathrooms_text" , "amenities","price"))

```

```{r}
glimpse(Airbnb_sub)

```

```{r}
# We keep all the variables that we want to take into consideration for our model. Now, let's review the missing values to determine how to handle them
print(colSums(is.na(Airbnb_sub)))
```

```{r}
# beds
#In the case of records with NA in the 'beds' field, we observe that the majority are campsites, so we will consider 'beds = 0' for these cases.

Airbnb_sub$beds <- ifelse(is.na(Airbnb_sub$beds), 0, Airbnb_sub$beds)

#price_numeric
#In the case of our variable price_numeric, we are going to remove the records with n = 0 since it is our dependent variable

Airbnb_sub <- Airbnb_sub[!is.na(Airbnb_sub$price_numeric), ]


```

```{r}
modelo <- lm(price_numeric ~ ., data = Airbnb_sub)
summary(modelo)

```

```{r}
model <- lm(bedrooms ~  accommodates +  beds + host_response_rate_percentage,
            data = Airbnb_sub)
summary(model)
```

```{r}
if (!requireNamespace("here", quietly = TRUE)) {
  install.packages("here")
}
library(here)

# Guardar el dataframe como un archivo CSV en la misma carpeta que el archivo Markdown
write.csv(Airbnb_sub, here::here("Airbnb_sub.csv"), row.names = FALSE)

```

## Introduction

The objective of this project is to generate a model that allows setting prices for Airbnb ads in Asheville, North Carolina.

To achieve this goal, we have a database of various Airbnb rental listings in the city, which contains detailed information about the listings, such as price, number of rooms, amenities, number of bathrooms, property location, etc. This database was extracted in June 2023 by the company Inside Airbnb and contains information about 3239 rental listings in Asheville, North Carolina. Therefore, the conclusions drawn are based on this time period.

To develop a model that enables us to set prices for Airbnb ads in Asheville, we will use a linear regression approach. Linear regression is a statistical technique used to model the relationship between a dependent variable and one or more independent variables.

### Linear regression

Linear regression is a statistical technique used to model the relationship between a dependent variable and one or more independent variables. In this context, the dependent variable would be the price of Airbnb ads, while independent variables may include features such as the number of rooms, amenities, number of bathrooms, and property location, among others.

### Conclusion
