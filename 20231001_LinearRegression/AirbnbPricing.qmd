---
format: pdf 
output: 
  pdf_document: 
  latex_engine: xelatex
---

```{r, include = FALSE}
# Global settings to hide code and results in the final document
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results='hide')
```

```{r}
# Load required packages and read Airbnb data from GitHub

library(pacman)

p_load(tidymodels, tidyverse, readr, geosphere, ggplot2, gridExtra, broom, stargazer, car, knitr, corrplot, sjPlot, sjmisc, sjlabelled)

path <- "https://raw.githubusercontent.com/BarbaraPFloresRios/IDS702_ModelingAndRepresentationOfData/main/20231001_AirbnbPricing/listings.csv"

Airbnb <- read_csv(path)
```

```{r}
# Cleaning data and selecting relevant columns for predictive modeling

#First, We created the Airbnb_sub dataset for easier work. 
Airbnb_sub <- Airbnb 

#Then, we create new variables that allow us to use the current variables in our model.

# host_since
# To include the date since the host joined the platform, we will consider the number of days between their joining date and the date when the database was extracted, i.e., June 18, 2023.

Airbnb_sub$host_days_since_joining <- round(as.numeric(difftime("2023-06-18", Airbnb_sub$host_since, units = "days")))

# host_response_time
Airbnb_sub$host_response_time_category <- factor(Airbnb_sub$host_response_time, levels = c("N/A", "a few days or more", "within a day", "within a few hours", "within an hour"))

# host_response_rate
Airbnb_sub <- Airbnb_sub %>%
  mutate(host_response_rate_percentage = as.numeric(sub("%", "", host_response_rate)) / 100)

# host_acceptance_rate
Airbnb_sub <- Airbnb_sub %>%
  mutate(host_acceptance_rate_percentage = as.numeric(sub("%", "", host_acceptance_rate)) / 100)

#host_is_superhost 
#We fill in the NA values for 'host_is_superhost' with false

Airbnb_sub$host_is_superhost_filled <- ifelse(is.na(Airbnb_sub$host_is_superhost), FALSE, Airbnb_sub$host_is_superhost)

#neighbourhood
Airbnb_sub <- Airbnb_sub %>%
  mutate(neighbourhood_grouped = factor(
    case_when(
      grepl("Arden", neighbourhood) ~ "Arden",
      grepl("Asheville", neighbourhood) ~ "Asheville",
      grepl("Ashville", neighbourhood) ~ "Asheville",
      grepl("Avery Creek", neighbourhood) ~ "Avery Creek",
      grepl("Biltmore Forest", neighbourhood) ~ "Biltmore Forest",
      grepl("Buncombe County", neighbourhood) ~ "Buncombe County",
      grepl("Candler", neighbourhood) ~ "Candler",
      grepl("Fairview", neighbourhood) ~ "Fairview",
      grepl("Fletcher", neighbourhood) ~ "Fletcher",
      grepl("Leicester", neighbourhood) ~ "Leicester",
      grepl("Woodfin", neighbourhood) ~ "Woodfin",
      TRUE ~ "Others"
    ),
    levels = c("Arden", "Asheville", "Avery Creek", "Biltmore Forest", "Buncombe County", 
               "Candler", "Fairview", "Fletcher", "Leicester", "Woodfin", "Others")
  ))

# "longitude","latitude"
Airbnb_sub$dist_to_dt <- apply(Airbnb_sub[,c("longitude","latitude")],1,function(x) distm(
  c(-82.55481168521978,35.59701329976918),
  x,fun=distHaversine))*0.00062137

# property_type
Airbnb_sub <- Airbnb_sub %>%
  mutate(
    property_type_grouped = factor(
      case_when(
        grepl("Entire", property_type) ~ "Entire Place",
        grepl("Private room", property_type) ~ "Private Room",
        grepl("Shared room", property_type) ~ "Shared Room",
        grepl("Barn|Bus|Camper/RV|Campsite|Farm stay|Tent|Tiny home|Yurt", property_type) ~ "Non-Traditional",
        TRUE ~ "Other"
      ),
      levels = c("Entire Place", "Private Room", "Shared Room", "Non-Traditional", "Other")
    )
  )

# room_type
Airbnb_sub$entire_home_apt <- ifelse(Airbnb_sub$room_type == "Entire home/apt", TRUE, FALSE)

# bathrooms_text
Airbnb_sub$bathrooms_text <- gsub("Half-bath|Shared half-bath", "0.5", Airbnb_sub$bathrooms_text)

Airbnb_sub$bathrooms_numeric <- as.numeric(gsub("[^0-9.]", "", Airbnb_sub$bathrooms_text))

#price
Airbnb_sub$price_numeric <- as.numeric(gsub("\\$", "", Airbnb_sub$price))

# Price transformation using logarithm is performed, as the QQ plot exhibited a systematic deviation between the theoretical distribution and the actual distribution of the data. This could stem from both the non-normality of the residuals and heteroscedasticity.
Airbnb_sub$log_price <- log(Airbnb_sub$price_numeric)

```

```{r}
#amenities

#Binary variables are created for the most repeated amenities, grouping some categories to facilitate data management (since originally there are 2115 different amenities).

Airbnb_sub <- Airbnb_sub %>%
  mutate(
    security = ifelse(grepl("alarm|fire extinguisher|extinguisher|first aid kit", tolower(amenities)), TRUE, FALSE),
    essentials = ifelse(grepl("essentials|hot water", tolower(amenities)), TRUE, FALSE),
    kitchen_amenities = ifelse(grepl("dishes and silverware|microwave|kitchen|refrigerator|cooking  basics|coffee|freezer|wine glasses|oven|toaster|dining table", tolower(amenities)), TRUE, FALSE),
    entertainment = ifelse(grepl("tv|television|netflix|hdtv|fire t", tolower(amenities)), TRUE, FALSE),
    bedroom_amenities = ifelse(grepl("hangers|bed linens|iron|extra pillows and blankets", tolower(amenities)), TRUE, FALSE),
    work = ifelse(grepl("wifi|dedicated workspace", tolower(amenities)), TRUE, FALSE),
    parking = ifelse(grepl("parking", tolower(amenities)), TRUE, FALSE),
    toiletries = ifelse(grepl("hair dryer|shampoo|sleaning products|body soap|shower gel|conditioner", tolower(amenities)), TRUE, FALSE),
    climate_control = ifelse(grepl("heating|air conditioning", tolower(amenities)), TRUE, FALSE),
    convenience_features = ifelse(grepl("self check-in|private entrance", tolower(amenities)), TRUE, FALSE)
  )
```

```{r}
# To enhance readability, we remove the variables from Airbnb_sub that will not be used as they do not contribute useful information for the model (such as the publication URL, image, host name, etc.), and we will also eliminate the variables that have already been transformed into the final ones we will be working with.

Airbnb_sub <- Airbnb_sub |> select(-c(
# unused variable
"id","listing_url","scrape_id","last_scraped","source","name","description","neighborhood_overview","picture_url","host_id","host_url","host_name","host_location","host_about","host_thumbnail_url","host_picture_url","host_neighbourhood","host_listings_count","host_verifications","neighbourhood_cleansed","neighbourhood_group_cleansed","bathrooms","calendar_updated","calendar_last_scraped","first_review","last_review","license",

#transformed variables                                      
"host_since","host_response_time","host_response_rate","host_acceptance_rate", "host_is_superhost","neighbourhood", "latitude", "longitude" ,"property_type","room_type", "bathrooms_text" , "amenities","price"))

```

```{r}
glimpse(Airbnb_sub)

```

```{r}
# We keep all the variables that we want to take into consideration for our model. Now, let's review the missing values to determine how to handle them
print(colSums(is.na(Airbnb_sub)))
```

```{r}

# beds
#In the case of records with NA in the 'beds' field, we observe that the majority are campsites, so we will consider 'beds = 0' for these cases.

Airbnb_sub$beds <- ifelse(is.na(Airbnb_sub$beds), 0, Airbnb_sub$beds)

#price_numeric
#In the case of our variable price_numeric, we are going to remove the records with n = 0 since it is our dependent variable

Airbnb_sub <- Airbnb_sub[!is.na(Airbnb_sub$price_numeric), ]

Airbnb_sub <- na.omit(Airbnb_sub)
```

```{r}
# Note: entire_home_apt is a room_type transformation

model1 <- lm(price_numeric ~ entire_home_apt + bedrooms + bathrooms_numeric + dist_to_dt + entertainment  + climate_control + accommodates , data = Airbnb_sub)
summary(model1)

```

```{r}
# Price transformation using logarithm is performed, as the QQ plot exhibited a systematic deviation between the theoretical distribution and the actual distribution of the data. This could stem from both the non-normality of the residuals and heteroscedasticity.
model2 <- lm(log_price ~ entire_home_apt + bedrooms + bathrooms_numeric + dist_to_dt + entertainment  + climate_control + accommodates , data = Airbnb_sub)
summary(model2)

cat("Mean Squared Error:", mean(summary(model2)$residuals^2))
```

# Airbnb Price Regression Modeling - **Report for** Airbnb executives

### Introduction

The objective of this project is to generate a model that allows setting prices for Airbnb ads in Asheville, North Carolina. To achieve this goal, we have a database of various Airbnb rental listings in the city, which contains detailed information about the listings, such as price, number of rooms, amenities, number of bathrooms, property location, etc. This database was extracted in June 2023 by the company Inside Airbnb and contains information about 3,239 rental listings in Asheville, NC. Therefore, the conclusions drawn are based on this time period.

To develop a model that enables us to set prices for Airbnb ads in Asheville, we will use a linear regression approach. Linear regression is a statistical technique used to model the relationship between a dependent variable and one or more independent variables. In this context, the dependent variable would be the price of Airbnb ads, while independent variables may include features such as the number of rooms, amenities, number of bathrooms, and property location, among others.

In the following scatter plots, we observe positive linear relationships between '*Accommodates*', '*Bathrooms*' and '*Bedrooms*' and the dependent variable '*Price*'. In contrast, '*Dist to Downtown'* presents a negative relationship, indicating that homes closer to downtown tend to be more expensive. These patterns illustrate the goal of a regression model: to identify a line that minimizes the sum of squared errors between predicted and actual values

```{r, results = TRUE}

scatter_plot_dist <- ggplot(Airbnb_sub, aes(x = dist_to_dt, y = price_numeric)) +
  geom_point(color = "yellow", alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "orange") +
  labs(title = "Dist to Downtown vs Price", x = "Distance to Downtown (miles)", y = "Daily Rental Price") +
  theme(plot.title = element_text(size = 8),  
        axis.title = element_text(size = 8))  

scatter_plot_accommodates <- ggplot(Airbnb_sub, aes(x = accommodates, y = price_numeric)) +
  geom_point(color = "turquoise", alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "green") +
  labs(title = "Accommodates vs Price", x = "Number of Accommodates", y = "Daily Rental Price") +
  theme(plot.title = element_text(size = 8),  
        axis.title = element_text(size = 8))  

scatter_plot_bathrooms <- ggplot(Airbnb_sub, aes(x = bathrooms_numeric, y = price_numeric)) +
  geom_point(color = "pink", alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "purple") +
  labs(title = "Bathrooms vs Price", x = "Number of Bathrooms", y = "Daily Rental Price") +
  theme(plot.title = element_text(size = 8),  
        axis.title = element_text(size = 8))  

scatter_plot_bedrooms <- ggplot(Airbnb_sub, aes(x = bedrooms, y = price_numeric)) +
  geom_point(color = "skyblue", alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Bedrooms vs Price", x = "Number of Bedrooms", y = "Daily Rental Price") +
  theme(plot.title = element_text(size = 8),  
        axis.title = element_text(size = 8)) 

grid.arrange(scatter_plot_dist, scatter_plot_accommodates, scatter_plot_bathrooms, scatter_plot_bedrooms,
             ncol = 2, heights = c(2, 2))
```

{{< pagebreak >}}

### Methods

After data cleaning, variable consideration, and iterative model refinement, we developed a linear regression model for Airbnb pricing. Missing data were addressed through decision rules, resulting in a final database of 2,243 rows from the original 3,239.

### Results

The final model obtained is the following:

*ln(price) = 3.74+ 0.13\*(is entire home apt) + 0.08\*(n° bedrooms) + 0.14\*(n° bathrooms) - 0.05\*(dist to downtown) + 0.19\*(has entertainment amenities) + 0.44\*(has climate control) + 0.07\*(n°accommodates)*

The coefficient accompanying a variable in a linear regression is the amount by which the response variable (dependent variable) changes for each one-unit change in the predictor variable (independent variable), while keeping all other variables constant. For example, one would expect that, on average, for each additional room, the logarithm of the price would increase by 0.082.

If we were in the situation of defining the price of a new property, we should evaluate the variables of that property in the model. For example, let's assume we have a rental in Asheville, which is an entire home apartment (coded as 1), has 3 bedrooms, 1 bathroom, is located 3 miles from downtown, lacks a TV, Netflix, or any entertainment amenities (codes as 0), has air conditioning (coded as 1), and can accommodate 5 guests. Finally, we could predict a price as follows:

*ln(price) = 3.74+ 0.13\*(1) + 0.08\*(3) + 0.14\*(1) - 0.05(3) + 0.19\*(0) + 0.44\*(1) + 0.07\*(5) = 4.893*

*price = e\^4.893= 133*

So, a suggested price for this rental is \$133 per night

A measure obtained from our model is an R² of 0.52, which means that approximately 52% of the variability in the rental prices in Assville can be explained by the variables included in our model.

### Conclusion

With the database, we were able to create a model to determine the rental price in Assville, as seen in the previous example. However, it is important to consider that other factors may be explaining the rental price, and here we are bound by our original database. With our model, we were only able to explain 52% of the variance, However, it can still be useful as a guide if our goal is to determine the listing price for a new rental on Airbnb.

{{< pagebreak >}}

# Airbnb Price Regression Modeling - Report for Data Science Team

### Introduction

The objective of this project is to generate a linear regression model that allows setting prices for Airbnb ads in Asheville, North Carolina.

**Dataset**

We have a database of various Airbnb rental listings in the city, obtained through web scraping, which contains detailed information about the listing. The original database includes **75 variables**. This dataset was extracted in June 2023 by the company Inside Airbnb and contains information about **3,239** rental listings in Asheville, North Carolina. Therefore, the conclusions drawn are based on this time period. The database and dictionary can be downloaded from [listings.csv](https://anlane611.github.io/ids702-fall23/DAA/listings.csv) and [Inside Airbnb Data Dictionary](https://docs.google.com/spreadsheets/d/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4/edit#gid=1322284596)

**Data cleaning**

-   First, the database was cleaned to be used for a linear regression model. Variables that did not contribute information to the model were excluded, such as: *"id", "listing_url", "scrape_id", "last_scraped", "source", "name", "description", "neighborhood_overview", "picture_url"," host_id",* etc.

-   Secondly, certain transformations were performed on some variables to handle them within the model, such as *"host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "neighbourhood", "latitude", "longitude" ,"property_type", "room_type", "bathrooms_text", "amenities"* and *"price".*

-   It is worth mentioning that the ***'amenities'*** variable considered combinations of 2,115 different features, so the following transformation was performed: new binary variables were generated to group the most frequent amenities. For example, ***'security'*** considers *'smoke and fire alarms', 'fire extinguisher', and 'first aid kit'. **'kitchen_amenities'** includes 'dishes and silverware', 'microwave', 'kitchen', 'refrigerator', 'cooking basics', 'coffee', 'freezer', 'wine glasses', 'oven', 'toaster', and 'dining table'."*

-   Certain variables were handled for missing values, such as in the case of the 'beds' variable. For records with NA in the 'beds' field, we observed that the majority represent campsites; therefore, we will consider 'beds = 0' for these instances. In other cases, rows with missing values were simply removed. The final model, as a result, incorporated 2,243 out of the original 3,239 rows.

{{< pagebreak >}}

### Methods

-   After data cleaning, the following explanatory variables were considered as a foundation:

    -   Room type (Transformed into the binary variable '**entire_home_apt**' )

    -   Number of bedrooms.

    -   Distance to downtown.

    -   Amenities, which, as mentioned earlier, were categorized into binary variables.

-   Additional variables were considered for the model, focusing on factors relevant to new hosts for price determination. Variables like *"review scores" or "superhost status"* were omitted, given the emphasis on new, unrated listings or hosts new to the platform.

-   Also, interactions were not considered in the model to enhance its interpretability.

-   Examined correlations using plots; removed highly correlated variables. For instance, "accommodates" strongly correlates with "n° of beds"; only "accommodates" remained.

-   The binary amenities variables "*security", "essentials", "bedroom amenities", "convenience features", "kitchen amenities"* and *"toiletries"* proved to be less significant in predicting the price, and thus, they were removed.

-   In the final model, logarithmic transformation of the price was performed, as the QQ plot exhibited a systematic deviation between the theoretical distribution and the actual distribution of the data. This could result from both the non-normality of the residuals and heteroscedasticity.

```{r, results = TRUE, fig.height= 3, fig.width= 6 }
par(mfcol = c(1, 2))
plot(model1, which = 2, main = "Model 1: using price", cex.main = 0.8)  
plot(model2, which = 2, main = "Model 2: using log(price)", cex.main = 0.8)  
```

{{< pagebreak >}}

After several iterations, the finally selected model was:

*ln(price) = 3.74+ 0.13\*(is entire home apt) + 0.08\*(n° bedrooms) + 0.14\*(n° bathrooms) - 0.05\*(dist to downtown) + 0.19\*(has entertainment amenities) + 0.44\*(has climate control) + 0.07\*(n°accommodates)*

The details of the coefficients and statistics obtained with this model are as follows:

```{r, results = TRUE}
tab_model(model2)
```

F-statistic: 351.5 on 7 and 2235 DF, p-value: \< 2.2e-16


Mean Squared Error: 0.1494199

-   In general, the model explains approximately 52% of the variability in the logarithm of the price. The F-statistic and p-value suggest that the model is statistically significant. Additionally, the coefficients have small p-values, indicating that they are statistically significant.

-   The Mean Squared Error (MSE) of 0.15 suggests that, on average, the predictions of the regression model exhibit a relatively low mean squared error, indicating a reasonable level of accuracy. In the context of model evaluation, this MSE is considered relatively good, signifying that the model performs well in minimizing prediction errors.

-   If we calculate the Variance Inflation Factor (VIF) for our model, we obtain the following:

```{r results=TRUE}
print(vif(model2))
```

-   VIF measures the degree to which the variance of an estimated regression coefficient is inflated due to multicollinearity with other predictors. VIF values close to 1 indicate minimal multicollinearity, while values exceeding 5 suggest a moderate to high level. In this context, variables such as *"entire home apt", "dist to dt", "entertainment", and "climate_control"* exhibit minimal multicollinearity with VIFs less than 5, implying stable regression coefficients. Conversely, variables like *"bedrooms"* and *"accommodates"* show moderate multicollinearity. However, the decision was made to retain both variables as both are theoretically expected to influence the rental price.

### Conclusion

-   Considering the task of helping new hosts set prices for Airbnb listings in Asheville, NC, falls more into the category of a **Prediction Problem.** The primary goal is to build a model that can accurately predict or generate prices for Airbnb listings based on various factors. We want to provide hosts with a tool that can predict the optimal price for their listings rather than drawing in-depth inferences about the underlying relationships between variables. However, this model is also useful for explaining some of the variables that have a significant impact on the determination of the price, even though its primary goal is predictive.

-   The price is transformed using a logarithm due to a systematic deviation observed in the QQ plot between the theoretical distribution and the actual distribution of the data.

-   Examined correlations using plots; removed highly correlated variables. For instance, "accommodates" strongly correlates with "n° of beds"; only "accommodates" remained. Finally, an acceptable VIF was obtained where the values of your variables were close to 5 or lower.

-   A key metric for evaluating the model's performance is the Mean Squared Error (MSE). In summary, the model demonstrates a satisfactory level of accuracy, evidenced by a relatively low MSE. The successful minimization of prediction errors highlights commendable performance, aligning with expectations. According to R2, the model explains approximately 52% of the variability in the logarithm of the price.

-   Generally, we can consider this to be a valid model for predicting or determining the price of a home in Asheville, given its low multicollinearity, statistical significance of the model, significance of its variables, and the associated MSE (mean squared error).However, It is important to consider that other factors may be explaining the rental price, and here we are bound by our original database. With our model, we were only able to explain 52% of the variance, However, it can still be useful as a guide if our goal is to determine the listing price for a new rental on Airbnb.
